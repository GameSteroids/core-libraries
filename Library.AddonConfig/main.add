local subMenus = {}

local addonConfigModified = false

local uniqueId = 1

local property = function(name)
    return function(self, ...)
        local args = {n = select('#', ...), ...}

        if args.n == 0 then
            return self[name]
        else
            self[name] = args[1]

            return self
        end
    end
end

class 'ConfigElement' -- {
    ConfigElement.Parent = property('_parent')
    ConfigElement.UniqueId = property('_uniqueId')
    ConfigElement.Id = property('_id')

    function ConfigElement:__init()
        self:UniqueId(uniqueId)
        self:Id(uniqueId)

        uniqueId = uniqueId + 1
    end
-- }

class 'ConfigValueElement' (ConfigElement) -- {
    ConfigValueElement.Caption = property('_caption')
    ConfigValueElement.Value = property('_value')

    function ConfigValueElement:__init(caption, defaultValue)
        ConfigElement.__init(self)

        self:Caption(caption)
        self:Value(defaultValue)
    end
-- }

class 'ConfigContainerElement' (ConfigElement) -- {
    ConfigContainerElement.Children = property('_children')

    function ConfigContainerElement:__init()
        ConfigElement.__init(self)

        self:Children({})
    end

    function ConfigContainerElement:__call(childElements)
        local orderedChildren = {}
        for index, component in pairs(childElements or {}) do
            if type(index) == 'string' then
                orderedChildren[#orderedChildren + 1] = component:Id(index)
            else
                orderedChildren[#orderedChildren + 1] = component:Id(component:UniqueId())
            end
        end

        table.sort(orderedChildren, function(c1, c2)
            return c1:UniqueId() < c2:UniqueId()
        end)

        self:Add(unpack(orderedChildren))

        return self
    end

    function ConfigContainerElement:Add(...)
        addonConfigModified = true

        local children = self:Children()
        for k, component in ipairs({...}) do
            component:Parent(self)

            self[component:Id()] = component
            children[#children + 1] = component
        end
    end
-- }

class 'Menu' (ConfigContainerElement) -- {
    Menu.Caption = property('_caption')

    function Menu:__init(caption)
        ConfigContainerElement.__init(self)

        self:Caption(caption)
    end

    function Menu:Render(web)
        local renderResult = '<a href="#" style="border-radius:0px;" id="' .. self:UniqueId() .. '"><i class="ui-icon fa fa-bars" style="position: absolute;top:5px;left:5px;"></i>' .. self._caption .. '</a><ul>';

        for k, component in ipairs(self:Children()) do
            renderResult = renderResult .. '<li>' .. component:Render(web) .. '</li>'
        end

        return renderResult .. '</ul>'
    end
-- }

class 'Section' (ConfigContainerElement) -- {
    Section.Caption = property('_caption')

    function Section:__init(caption)
        ConfigContainerElement.__init(self)

        self:Caption(caption)
    end

    function Section:Render(web)
        local renderResult = '<div style="margin-top:2px;color:#ffffff;position:relative;z-Index:1;top:10px;font-size:8px;font-family:Silkscreen;text-align:center"><span style="display:inline-block;background-color:#111111;padding-left:1px;padding-right:1px;">' .. self._caption .. '</span></div></li><li class="section">-';

        for k, component in ipairs(self:Children()) do
            renderResult = renderResult .. '</li><li>' .. component:Render(web)
        end

        return renderResult
    end
-- }

class 'Separator' (ConfigValueElement) -- {
    function Separator:__init()
        ConfigValueElement.__init(self)
    end

    function Separator:Render(web)
        return '-'
    end
-- }

class 'Boolean' (ConfigValueElement) -- {
    function Boolean:__init(caption, defaultValue)
        ConfigValueElement.__init(self, caption, defaultValue)
    end

    function Boolean:Render(web)
        return '<a href="#" class="addonConfigBoolean" id="' .. self:UniqueId() .. '" onclick="' .. WebView.JSClosure(web, function()
            self:Value(not self:Value())

            if self._callback then
                self._callback(self:Value())
            end
        end) .. '();" id="u_' .. self:UniqueId() .. '"><i class="ui-icon fa fa-check" style="' .. (self:Value() and 'opacity:1;' or '') ..  '"></i>' .. self:Caption() .. '</a>'
    end
-- }

class 'Number' (ConfigValueElement) -- {
    function Number:__init(caption, defaultValue, callback)
        ConfigValueElement.__init(self, caption, defaultValue)
    end

    function Number:Render(web)
        return '<a href="#" class="addonConfigNumber" id="u_' .. self:UniqueId() .. '">' ..
           '<i class="ui-icon fa fa-pencil"></i>' ..
           '<span class="caption">' ..
              self._caption .. ': ' ..
              '<span class="currentValue">' ..
                  '<span class="rVal">' .. self:Value() .. '</span>' ..
                  '<input type=text onchange="' .. WebView.JSClosure(web, function(param)
                      self:Value(param)

                      if self._callback then
                          self._callback(self:Value())
                      end
                  end) .. '($(this).val());" style="visibility:hidden;position:absolute;top:0px;left:1px;width:100%;margin:0px;display:block;outline:0px;background-color:transparent;color:#ffffff;border:none" value="' .. self:Value() .. '" />' ..
              '</span>' ..
           '</span>' ..
       '</a>'
    end
-- }

class 'KeyBinding' (ConfigValueElement) -- {
    function KeyBinding:__init(caption, defaultValue)
        ConfigValueElement.__init(self, caption, defaultValue)
    end

    function KeyBinding:Render(web)
        return '<a href="#" class="addonConfigKeyBinding" id="' .. self:UniqueId() .. '">' ..
                   '<i class="ui-icon fa fa-keyboard-o"></i>' ..
                   '<span class="caption">' ..
                      self._caption .. ': ' ..
                      '<span class="currentValue">' ..
                          '<span class="rVal">' .. self:Value() .. '</span>' ..
                          '<input type=text onblur="' .. WebView.JSClosure(web, function(param)
                              self:Value(param)

                              if self._callback then
                                  self._callback(self:Value())
                              end
                          end) .. '($(this).val());" style="visibility:hidden;position:absolute;top:0px;left:1px;width:100%;margin:0px;display:block;outline:0px;background-color:transparent;color:#ffffff;border:none" value="' .. self:Value() .. '" />' ..
                      '</span>' ..
                   '</span>' ..
               '</a>'
    end
-- }

local Repaint = function(web)
    if #subMenus >= 1 then
        web  = web or WebView.GetMain()

        local result = '<ul id="menu"><li><a href="#" style="border-radius:0px;position:relative;"><i class="ui-icon fa fa-bars" style="position: absolute;top:5px;left:5px;"></i>Config</a><ul>'

        for k, component in ipairs(subMenus) do
            result = result .. '<li>' .. component:Render(web) .. '</li>'
        end

        web:JQuery('#menuContainer'):Invoke('append', '<script type="text/javascript">window.currentId = $("#menu .ui-state-focus").attr("id");</script>')
        web:JQuery('#menuContainer'):Invoke('html', result .. '</ul></li></ul>' .. [[<script type="text/javascript">
            $(function() {
                $(document).disableSelection();

                $("#menu").menu({
                    select: function(e, ui) {
                        $("#menu").menu("focus", e, ui.item);
                    },
                    blur: function(event, ui) {
                        LUA['Game.AllowKeyInput'](true);
                    },
                    focus: function(event, ui) {
                        LUA['Game.AllowKeyInput'](false);
                    },
                    position: {
                        my: "left top",
                        at: "right+7 top-6"
                    }
                });

                if(!(typeof window.currentId === "undefined")) {
                    $($("#menu").find("#" + window.currentId).parents('li').get().reverse()).each(function(index, element) {
                        $("#menu").menu("focus", $.Event("click"), $(element));
                        $('#menu').menu("expand", $.Event("click"));
                    });
                }
            });
        </script>]])
    end
end

Callback.Bind('WebInit', function(web, url)
    web:JQuery('body'):Invoke('append', Utility.ReadFile(path .. 'menu.html'))

    addonConfigModified = true
end)

function Create(subMenuCaption)
    local menu = Menu(subMenuCaption)

    Callback.Bind('Unload', function()
        Utility.WriteFile(path .. subMenuCaption .. '.cfg', JSON:encode(values))
    end)

    return setmetatable({}, {
        __call = function(t, children)
            table.insert(subMenus, menu(children))

            --if Utility.FileExists(path .. subMenuCaption .. '.cfg') then
            --    values = table.merge(menu:Value(), JSON:decode(Utility.ReadFile(path .. subMenuCaption .. '.cfg')))
            --else
            --    values = menu:value()
            --end

            return t
        end,

        __index = function(t, name)
            return menu[name]
        end
    })
end

Callback.Bind('Tick', function()
    if addonConfigModified then
        Repaint()

        addonConfigModified = false
    end
end)

class 'AddonConfig' (ConfigContainerElement) -- {
    AddonConfig.Menu = Menu
    AddonConfig.Boolean = Boolean
    AddonConfig.Number = Number
    AddonConfig.Separator = Separator
    AddonConfig.Section = Section
    AddonConfig.KeyBinding = KeyBinding
    AddonConfig.Repaint = Repaint

    AddonConfig.Caption = property('_caption')

    function AddonConfig:__init(caption)
        ConfigContainerElement.__init(self)

        self:Caption(caption)

        table.insert(subMenus, self)
    end

    function AddonConfig:Render(web)
        local renderResult = '<a href="#" style="border-radius:0px;"><i class="ui-icon fa fa-bars" style="position: absolute;top:5px;left:5px;"></i>' .. self._caption .. '</a><ul>';

        for k, component in ipairs(self:Children()) do
            renderResult = renderResult .. '<li>' .. component:Render(web) .. '</li>'
        end

        return renderResult .. '</ul>'
    end
-- }

_G.AddonConfig = AddonConfig